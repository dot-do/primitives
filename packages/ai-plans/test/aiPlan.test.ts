import 'dotenv/config'
import { describe, it, expect, beforeEach, vi } from 'vitest'
import { generateAIPlan } from '../src'
import { setupTestEnvironment } from './utils/setupTests'
import { getTestObjective, AI_TEST_TIMEOUT } from './utils/test-helpers'

vi.mock('ai-providers', () => ({
  languageModel: vi.fn(() => ({
    doGenerate: vi.fn(async ({ prompt }) => {
      const mockPlanData = {
        name: 'AI Generated Plan',
        description: 'A comprehensive plan generated by AI',
        goal: {
          objective: 'Achieve the specified objective',
          keyResults: [
            'Complete key milestone 1',
            { description: 'Achieve 90% target completion', target: 90, currentValue: 0, unit: '%' },
            'Deliver final outcome'
          ]
        },
        steps: [
          { name: 'Initial setup', description: 'Set up the foundation', status: 'not_started' },
          { name: 'Execute plan', description: 'Implement the strategy', status: 'not_started' }
        ]
      }
      
      return { text: JSON.stringify(mockPlanData) }
    })
  }))
}))

describe('AI Plan Generation', () => {
  beforeEach(() => {
    setupTestEnvironment()
  })

  describe('generateAIPlan function', () => {
    it(
      'should generate a plan from simple objective',
      async () => {
        const objective = getTestObjective('simple')
        const plan = await generateAIPlan(objective)
        
        expect(plan).toBeDefined()
        expect(plan.name).toBeDefined()
        expect(typeof plan.name).toBe('string')
        expect(plan.name.length).toBeGreaterThan(5)
        
        expect(plan.description).toBeDefined()
        expect(typeof plan.description).toBe('string')
        
        expect(plan.goals).toHaveLength(1)
        expect(plan.goals[0].objective).toBeDefined()
        expect(plan.goals[0].keyResults.length).toBeGreaterThan(0)
        expect(plan.goals[0].keyResults.length).toBeLessThanOrEqual(5)
      },
      AI_TEST_TIMEOUT
    )

    it(
      'should generate a plan with steps',
      async () => {
        const objective = getTestObjective('complex')
        const plan = await generateAIPlan(objective, { includeSteps: true })
        
        expect(plan.steps).toBeDefined()
        expect(Array.isArray(plan.steps)).toBe(true)
        expect(plan.steps!.length).toBeGreaterThan(0)
        
        plan.steps!.forEach(step => {
          expect(step.name).toBeDefined()
          expect(typeof step.name).toBe('string')
          expect(step.description).toBeDefined()
          expect(typeof step.description).toBe('string')
        })
      },
      AI_TEST_TIMEOUT
    )

    it(
      'should respect maxKeyResults option',
      async () => {
        const objective = getTestObjective('simple')
        const plan = await generateAIPlan(objective, { maxKeyResults: 3 })
        
        expect(plan.goals[0].keyResults.length).toBeLessThanOrEqual(3)
      },
      AI_TEST_TIMEOUT
    )

    it(
      'should handle different temperature settings',
      async () => {
        const objective = getTestObjective('simple')
        const plan = await generateAIPlan(objective, { temperature: 0.1 })
        
        expect(plan).toBeDefined()
        expect(plan.name).toBeDefined()
        expect(plan.goals[0].keyResults.length).toBeGreaterThan(0)
      },
      AI_TEST_TIMEOUT
    )

    it('should return a plan with all required methods', async () => {
      const objective = getTestObjective('simple')
      const plan = await generateAIPlan(objective)
      
      expect(typeof plan.save).toBe('function')
      expect(typeof plan.updateProgress).toBe('function')
      expect(typeof plan.getProgress).toBe('function')
    })
  })
})
